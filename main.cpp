#include <iostream>
#include <bitset>
#include <fstream>
#include <vector>

// TODO ensure compatibility with file formats other than text
// Known compatibility: test only documents like txt or source code files
// Known incompatibilities: word documents (odt, doc), music (mp3, wav), pictures (jpeg, png)
// TODO have the encryptor remove special chars like /n

using namespace std;

/*
 * flips bits for the file based on a random number generated by a password used as a seed
 */

void encrypt(vector<string> &lines, string key){

	//the randomizing seed based on a key (password)
	srand(hash<string>{}(key));

	string currLine;

	for (auto &line : lines) {
		currLine = line;

		for (char &jj : currLine) {
			bitset<8> bits(jj);

			for (int k = 0; k < 8; k++) {
				int r = rand() % 2;

				//EVIL BIT LEVEL HACKING
				if (r) {
					bits[k] = !bits[k];
				}

			}

			char temp = char(bits.to_ullong());

			if (temp == 0 || temp == 1 || temp == 2 || temp == 3 || temp == 5 || temp == 6 || temp == 8 || temp == 10 ||
					temp == 12 || temp == 13 || temp == 24 || temp == 27 || temp == 127) {
				continue;
			} else {
				jj = temp;
			}
		}
		line = currLine;
	}
}

/*
 * opens a file and reads every line into a vector
 */

void read(vector<string> &lines, string source){
	string l;
	fstream target;
	target.open(source);

	while(getline(target,l)){
//		cout << l << endl;
		lines.push_back(l);
	}

	target.close();
}

/*
 * writes to the source file with the encrypted or decrypted info
 */

void write(vector<string> &lines, string source){
	fstream target;
	target.open(source);

	for (const auto &line : lines) {
		target << line << endl;
	}

	target.close();
}

int main() {

	vector<string> lines;
	string source;
	string key;

	cout << "Enter the target file" << endl;
	cin >> source;

	cout << endl << "Enter your key (password)" << endl;
	cin >> key;

	read(lines, source);

	encrypt(lines, key);

	write(lines, source);

	return 0;
}